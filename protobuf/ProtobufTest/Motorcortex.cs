// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg/motorcortex.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Motorcortex {

  /// <summary>Holder for reflection information generated from msg/motorcortex.proto</summary>
  public static partial class MotorcortexReflection {

    #region Descriptor
    /// <summary>File descriptor for msg/motorcortex.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MotorcortexReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVtc2cvbW90b3Jjb3J0ZXgucHJvdG8SC21vdG9yY29ydGV4ImkKD1BhcmFt",
            "ZXRlck9mZnNldBI2CgR0eXBlGAEgAigOMhcubW90b3Jjb3J0ZXguT2Zmc2V0",
            "VHlwZToPT0ZGU0VUX0VMRU1FTlRTEg4KBm9mZnNldBgCIAIoDRIOCgZsZW5n",
            "dGgYAyACKA0iZgoFRXJyb3ISEQoJdGltZXN0YW1wGAEgAigGEhQKDGVycm9y",
            "X251bWJlchgCIAIoBxITCgtlcnJvcl9sZXZlbBgDIAIoBxIRCglzdWJzeXN0",
            "ZW0YBCACKAcSDAoEaW5mbxgFIAIoByJhCglFcnJvckxpc3QSIgoGZXJyb3Jz",
            "GAEgAygLMhIubW90b3Jjb3J0ZXguRXJyb3ISGAoQbnVtYmVyX29mX2Vycm9y",
            "cxgCIAIoBxIWCg51cGRhdGVfY291bnRlchgDIAIoByKKAgoNUGFyYW1ldGVy",
            "SW5mbxIKCgJpZBgBIAIoDRIRCglkYXRhX3R5cGUYAiACKA0SEQoJZGF0YV9z",
            "aXplGAMgAigNEhoKEm51bWJlcl9vZl9lbGVtZW50cxgEIAIoDRINCgVmbGFn",
            "cxgFIAIoDRITCgtwZXJtaXNzaW9ucxgGIAIoDRIuCgpwYXJhbV90eXBlGAcg",
            "AigOMhoubW90b3Jjb3J0ZXguUGFyYW1ldGVyVHlwZRIoCghncm91cF9pZBgI",
            "IAIoDjIWLm1vdG9yY29ydGV4LlVzZXJHcm91cBIfCgR1bml0GAkgAigOMhEu",
            "bW90b3Jjb3J0ZXguVW5pdBIMCgRwYXRoGAogAigJIpQBChJHcm91cFBhcmFt",
            "ZXRlckluZm8SDQoFaW5kZXgYASACKA0SDgoGb2Zmc2V0GAIgAigNEgwKBHNp",
            "emUYAyACKA0SKAoEaW5mbxgEIAIoCzIaLm1vdG9yY29ydGV4LlBhcmFtZXRl",
            "ckluZm8SJwoGc3RhdHVzGAUgAigOMhcubW90b3Jjb3J0ZXguU3RhdHVzQ29k",
            "ZSIxCgZIZWFkZXISFAoMZnJhbWVDb3VudGVyGAEgAigHEhEKCXRpbWVzdGFt",
            "cBgCIAIoBiJaCghHcm91cE1zZxIjCgZoZWFkZXIYASABKAsyEy5tb3RvcmNv",
            "cnRleC5IZWFkZXISKQoGcGFyYW1zGAIgAygLMhkubW90b3Jjb3J0ZXguUGFy",
            "YW1ldGVyTXNnIlkKCVN0YXR1c01zZxIjCgZoZWFkZXIYASABKAsyEy5tb3Rv",
            "cmNvcnRleC5IZWFkZXISJwoGc3RhdHVzGAIgAigOMhcubW90b3Jjb3J0ZXgu",
            "U3RhdHVzQ29kZSJQCghMb2dpbk1zZxIjCgZoZWFkZXIYASABKAsyEy5tb3Rv",
            "cmNvcnRleC5IZWFkZXISDQoFbG9naW4YAiACKAkSEAoIcGFzc3dvcmQYAyAC",
            "KAkiOQoSR2V0U2Vzc2lvblRva2VuTXNnEiMKBmhlYWRlchgBIAEoCzITLm1v",
            "dG9yY29ydGV4LkhlYWRlciJuCg9TZXNzaW9uVG9rZW5Nc2cSIwoGaGVhZGVy",
            "GAEgASgLMhMubW90b3Jjb3J0ZXguSGVhZGVyEg0KBXRva2VuGAIgAigJEicK",
            "BnN0YXR1cxgDIAIoDjIXLm1vdG9yY29ydGV4LlN0YXR1c0NvZGUiRwoRUmVz",
            "dG9yZVNlc3Npb25Nc2cSIwoGaGVhZGVyGAEgASgLMhMubW90b3Jjb3J0ZXgu",
            "SGVhZGVyEg0KBXRva2VuGAIgAigJIjAKCUxvZ291dE1zZxIjCgZoZWFkZXIY",
            "ASABKAsyEy5tb3RvcmNvcnRleC5IZWFkZXIiOgoTR2V0UGFyYW1ldGVyVHJl",
            "ZU1zZxIjCgZoZWFkZXIYASABKAsyEy5tb3RvcmNvcnRleC5IZWFkZXIimgEK",
            "EFBhcmFtZXRlclRyZWVNc2cSIwoGaGVhZGVyGAEgASgLMhMubW90b3Jjb3J0",
            "ZXguSGVhZGVyEioKBnBhcmFtcxgCIAMoCzIaLm1vdG9yY29ydGV4LlBhcmFt",
            "ZXRlckluZm8SDAoEaGFzaBgDIAIoDRInCgZzdGF0dXMYBCACKA4yFy5tb3Rv",
            "cmNvcnRleC5TdGF0dXNDb2RlIj4KF0dldFBhcmFtZXRlclRyZWVIYXNoTXNn",
            "EiMKBmhlYWRlchgBIAEoCzITLm1vdG9yY29ydGV4LkhlYWRlciJyChRQYXJh",
            "bWV0ZXJUcmVlSGFzaE1zZxIjCgZoZWFkZXIYASABKAsyEy5tb3RvcmNvcnRl",
            "eC5IZWFkZXISDAoEaGFzaBgCIAIoDRInCgZzdGF0dXMYAyACKA4yFy5tb3Rv",
            "cmNvcnRleC5TdGF0dXNDb2RlImgKDkNyZWF0ZUdyb3VwTXNnEiMKBmhlYWRl",
            "chgBIAEoCzITLm1vdG9yY29ydGV4LkhlYWRlchITCgtmcnFfZGl2aWRlchgC",
            "IAIoDRINCgVhbGlhcxgDIAIoCRINCgVwYXRocxgEIAMoCSKqAQoOR3JvdXBT",
            "dGF0dXNNc2cSIwoGaGVhZGVyGAEgASgLMhMubW90b3Jjb3J0ZXguSGVhZGVy",
            "EgoKAmlkGAIgAigNEg0KBWFsaWFzGAMgAigJEi8KBnBhcmFtcxgEIAMoCzIf",
            "Lm1vdG9yY29ydGV4Lkdyb3VwUGFyYW1ldGVySW5mbxInCgZzdGF0dXMYBSAC",
            "KA4yFy5tb3RvcmNvcnRleC5TdGF0dXNDb2RlIkQKDlJlbW92ZUdyb3VwTXNn",
            "EiMKBmhlYWRlchgBIAEoCzITLm1vdG9yY29ydGV4LkhlYWRlchINCgVhbGlh",
            "cxgCIAIoCSJECg9HZXRQYXJhbWV0ZXJNc2cSIwoGaGVhZGVyGAEgASgLMhMu",
            "bW90b3Jjb3J0ZXguSGVhZGVyEgwKBHBhdGgYAiACKAkilQEKDFBhcmFtZXRl",
            "ck1zZxINCgV2YWx1ZRgBIAIoDBIjCgZoZWFkZXIYAiABKAsyEy5tb3RvcmNv",
            "cnRleC5IZWFkZXISKAoEaW5mbxgDIAEoCzIaLm1vdG9yY29ydGV4LlBhcmFt",
            "ZXRlckluZm8SJwoGc3RhdHVzGAQgAigOMhcubW90b3Jjb3J0ZXguU3RhdHVz",
            "Q29kZSJoChNHZXRQYXJhbWV0ZXJMaXN0TXNnEiMKBmhlYWRlchgBIAEoCzIT",
            "Lm1vdG9yY29ydGV4LkhlYWRlchIsCgZwYXJhbXMYAiADKAsyHC5tb3RvcmNv",
            "cnRleC5HZXRQYXJhbWV0ZXJNc2ciiwEKEFBhcmFtZXRlckxpc3RNc2cSIwoG",
            "aGVhZGVyGAEgASgLMhMubW90b3Jjb3J0ZXguSGVhZGVyEikKBnBhcmFtcxgC",
            "IAMoCzIZLm1vdG9yY29ydGV4LlBhcmFtZXRlck1zZxInCgZzdGF0dXMYAyAC",
            "KA4yFy5tb3RvcmNvcnRleC5TdGF0dXNDb2RlIoEBCg9TZXRQYXJhbWV0ZXJN",
            "c2cSIwoGaGVhZGVyGAEgASgLMhMubW90b3Jjb3J0ZXguSGVhZGVyEiwKBm9m",
            "ZnNldBgCIAEoCzIcLm1vdG9yY29ydGV4LlBhcmFtZXRlck9mZnNldBIMCgRw",
            "YXRoGAMgAigJEg0KBXZhbHVlGAQgAigMImgKE1NldFBhcmFtZXRlckxpc3RN",
            "c2cSIwoGaGVhZGVyGAEgASgLMhMubW90b3Jjb3J0ZXguSGVhZGVyEiwKBnBh",
            "cmFtcxgCIAMoCzIcLm1vdG9yY29ydGV4LlNldFBhcmFtZXRlck1zZyKZAQoV",
            "T3ZlcndyaXRlUGFyYW1ldGVyTXNnEiMKBmhlYWRlchgBIAEoCzITLm1vdG9y",
            "Y29ydGV4LkhlYWRlchIsCgZvZmZzZXQYAiABKAsyHC5tb3RvcmNvcnRleC5Q",
            "YXJhbWV0ZXJPZmZzZXQSEAoIYWN0aXZhdGUYAyACKAgSDAoEcGF0aBgEIAIo",
            "CRINCgV2YWx1ZRgFIAIoDCJIChNSZWxlYXNlUGFyYW1ldGVyTXNnEiMKBmhl",
            "YWRlchgBIAEoCzITLm1vdG9yY29ydGV4LkhlYWRlchIMCgRwYXRoGAIgAigJ",
            "Ik8KB1NhdmVNc2cSIwoGaGVhZGVyGAEgASgLMhMubW90b3Jjb3J0ZXguSGVh",
            "ZGVyEgwKBHBhdGgYAiACKAkSEQoJZmlsZV9uYW1lGAMgAigJIk8KB0xvYWRN",
            "c2cSIwoGaGVhZGVyGAEgASgLMhMubW90b3Jjb3J0ZXguSGVhZGVyEgwKBHBh",
            "dGgYAiACKAkSEQoJZmlsZV9uYW1lGAMgAigJIkMKDUNvbnNvbGVDbWRNc2cS",
            "IwoGaGVhZGVyGAEgASgLMhMubW90b3Jjb3J0ZXguSGVhZGVyEg0KBXZhbHVl",
            "GAIgAigJImIKEUNvbnNvbGVDbWRMaXN0TXNnEiMKBmhlYWRlchgBIAEoCzIT",
            "Lm1vdG9yY29ydGV4LkhlYWRlchIoCgRjbWRzGAIgAygLMhoubW90b3Jjb3J0",
            "ZXguQ29uc29sZUNtZE1zZyqrAgoEVW5pdBISCg51bml0X3VuZGVmaW5lZBAA",
            "EgoKBkxlbmd0aBAPEgYKAm1tEAESBQoBbRACEgoKBUFuZ2xlEPEBEgcKA3Jh",
            "ZBAxEgcKA2RlZxBBEgkKBFRpbWUQ8gESCwoHbmFub3NlYxASEgwKCG1pY3Jv",
            "c2VjECISDAoIbWlsbGlzZWMQMhIHCgNzZWMQQhILCgZXZWlnaHQQ8wESCAoE",
            "Z3JhbRATEgYKAmtnECMSDQoIVmVsb2NpdHkQ9AESCQoFbV9zZWMQFBILCgdy",
            "YWRfc2VjECQSEQoMQWNjZWxlcmF0aW9uEPUBEgoKBm1fc2VjMhAVEgwKCHJh",
            "ZF9zZWMyECUSCgoFRm9yY2UQ9gESBQoBThAWEgYKAk5tECYSCwoHcGVyY2Vu",
            "dBAXKmEKCVVzZXJHcm91cBIYChR1c2VyX2dyb3VwX3VuZGVmaW5lZBAAEgoK",
            "BlNZU1RFTRABEhEKDUFETUlOSVNUUkFUT1IQAxIMCghPUEVSQVRPUhAHEg0K",
            "BUdVRVNUEP////8HKsQBCgpQZXJtaXNzaW9uEhgKFHBlcm1pc3Npb25fdW5k",
            "ZWZpbmVkEAASDgoJVVNFUl9SRUFEEIACEg8KClVTRVJfV1JJVEUQgAESEAoM",
            "VVNFUl9FWEVDVVRFEEASDgoKR1JPVVBfUkVBRBAgEg8KC0dST1VQX1dSSVRF",
            "EBASEQoNR1JPVVBfRVhFQ1VURRAIEg8KC09USEVSU19SRUFEEAQSEAoMT1RI",
            "RVJTX1dSSVRFEAISEgoOT1RIRVJTX0VYRUNVVEUQASrUAQoIRGF0YVR5cGUS",
            "FwoTZGF0YV90eXBlX3VuZGVmaW5lZBAAEggKBElOVDgQARIJCgVVSU5UOBAC",
            "EgkKBUlOVDE2EAMSCgoGVUlOVDE2EAQSCQoFSU5UMzIQBRIKCgZVSU5UMzIQ",
            "BhIJCgVJTlQ2NBAHEgoKBlVJTlQ2NBAIEggKBEJPT0wQCRIKCgVGTE9BVBCB",
            "AhILCgZET1VCTEUQggISCQoEQ0hBUhCBBBILCgZTVFJJTkcQggQSCgoFQllU",
            "RVMQmQkSDgoJVVNFUl9UWVBFEIAKKoQBCg1QYXJhbWV0ZXJUeXBlEhgKFHBh",
            "cmFtX3R5cGVfdW5kZWZpbmVkEAASCQoFSU5QVVQQARIKCgZPVVRQVVQQEBIO",
            "CglQQVJBTUVURVIQgAISFwoSUEFSQU1FVEVSX1ZPTEFUSUxFEIECEhkKFFBB",
            "UkFNRVRFUl9QRVJTSVNURU5UEIICKpoCCgpTdGF0dXNDb2RlEgYKAk9LEAAS",
            "EgoOUkVBRF9PTkxZX01PREUQARIMCgZGQUlMRUQQgP4DEhUKEEZBSUxFRF9U",
            "T19ERUNPREUQgCASFQoQU1VCX0xJU1RfSVNfRlVMTBCAIhIZChRXUk9OR19Q",
            "QVJBTUVURVJfUEFUSBCAJBIgChtGQUlMRURfVE9fU0VUX1JFUVVFU1RFRF9G",
            "UlEQgCYSGAoTRkFJTEVEX1RPX09QRU5fRklMRRCAKBIXChJHUk9VUF9MSVNU",
            "X0lTX0ZVTEwQgCoSEwoOV1JPTkdfUEFTU1dPUkQQgEISFwoSVVNFUl9OT1Rf",
            "TE9HR0VEX0lOEIBEEhYKEVBFUk1JU1NJT05fREVOSUVEEIBGKnYKCkVycm9y",
            "TGV2ZWwSGQoVZXJyb3JfbGV2ZWxfdW5kZWZpbmVkEAASCAoESU5GTxABEgsK",
            "B1dBUk5JTkcQAhIUChBGT1JDRURfRElTRU5HQUdFEAMSDAoIU0hVVERPV04Q",
            "BBISCg5FTUVSR0VOQ1lfU1RPUBAFKl8KCk9mZnNldFR5cGUSGQoVb2Zmc2V0",
            "X3R5cGVfdW5kZWZpbmVkEAASEwoPT0ZGU0VUX0VMRU1FTlRTEAESEAoMT0ZG",
            "U0VUX0JZVEVTEAISDwoLT0ZGU0VUX0JJVFMQAyo8Cg1QYXJhbWV0ZXJGbGFn",
            "EhIKDkxJTktfSVNfQUNUSVZFEAESFwoTT1ZFUldSSVRFX0lTX0FDVElWRRAC"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Motorcortex.Unit), typeof(global::Motorcortex.UserGroup), typeof(global::Motorcortex.Permission), typeof(global::Motorcortex.DataType), typeof(global::Motorcortex.ParameterType), typeof(global::Motorcortex.StatusCode), typeof(global::Motorcortex.ErrorLevel), typeof(global::Motorcortex.OffsetType), typeof(global::Motorcortex.ParameterFlag), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.ParameterOffset), global::Motorcortex.ParameterOffset.Parser, new[]{ "Type", "Offset", "Length" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.Error), global::Motorcortex.Error.Parser, new[]{ "Timestamp", "ErrorNumber", "ErrorLevel", "Subsystem", "Info" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.ErrorList), global::Motorcortex.ErrorList.Parser, new[]{ "Errors", "NumberOfErrors", "UpdateCounter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.ParameterInfo), global::Motorcortex.ParameterInfo.Parser, new[]{ "Id", "DataType", "DataSize", "NumberOfElements", "Flags", "Permissions", "ParamType", "GroupId", "Unit", "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.GroupParameterInfo), global::Motorcortex.GroupParameterInfo.Parser, new[]{ "Index", "Offset", "Size", "Info", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.Header), global::Motorcortex.Header.Parser, new[]{ "FrameCounter", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.GroupMsg), global::Motorcortex.GroupMsg.Parser, new[]{ "Header", "Params" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.StatusMsg), global::Motorcortex.StatusMsg.Parser, new[]{ "Header", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.LoginMsg), global::Motorcortex.LoginMsg.Parser, new[]{ "Header", "Login", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.GetSessionTokenMsg), global::Motorcortex.GetSessionTokenMsg.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.SessionTokenMsg), global::Motorcortex.SessionTokenMsg.Parser, new[]{ "Header", "Token", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.RestoreSessionMsg), global::Motorcortex.RestoreSessionMsg.Parser, new[]{ "Header", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.LogoutMsg), global::Motorcortex.LogoutMsg.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.GetParameterTreeMsg), global::Motorcortex.GetParameterTreeMsg.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.ParameterTreeMsg), global::Motorcortex.ParameterTreeMsg.Parser, new[]{ "Header", "Params", "Hash", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.GetParameterTreeHashMsg), global::Motorcortex.GetParameterTreeHashMsg.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.ParameterTreeHashMsg), global::Motorcortex.ParameterTreeHashMsg.Parser, new[]{ "Header", "Hash", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.CreateGroupMsg), global::Motorcortex.CreateGroupMsg.Parser, new[]{ "Header", "FrqDivider", "Alias", "Paths" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.GroupStatusMsg), global::Motorcortex.GroupStatusMsg.Parser, new[]{ "Header", "Id", "Alias", "Params", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.RemoveGroupMsg), global::Motorcortex.RemoveGroupMsg.Parser, new[]{ "Header", "Alias" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.GetParameterMsg), global::Motorcortex.GetParameterMsg.Parser, new[]{ "Header", "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.ParameterMsg), global::Motorcortex.ParameterMsg.Parser, new[]{ "Value", "Header", "Info", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.GetParameterListMsg), global::Motorcortex.GetParameterListMsg.Parser, new[]{ "Header", "Params" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.ParameterListMsg), global::Motorcortex.ParameterListMsg.Parser, new[]{ "Header", "Params", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.SetParameterMsg), global::Motorcortex.SetParameterMsg.Parser, new[]{ "Header", "Offset", "Path", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.SetParameterListMsg), global::Motorcortex.SetParameterListMsg.Parser, new[]{ "Header", "Params" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.OverwriteParameterMsg), global::Motorcortex.OverwriteParameterMsg.Parser, new[]{ "Header", "Offset", "Activate", "Path", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.ReleaseParameterMsg), global::Motorcortex.ReleaseParameterMsg.Parser, new[]{ "Header", "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.SaveMsg), global::Motorcortex.SaveMsg.Parser, new[]{ "Header", "Path", "FileName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.LoadMsg), global::Motorcortex.LoadMsg.Parser, new[]{ "Header", "Path", "FileName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.ConsoleCmdMsg), global::Motorcortex.ConsoleCmdMsg.Parser, new[]{ "Header", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Motorcortex.ConsoleCmdListMsg), global::Motorcortex.ConsoleCmdListMsg.Parser, new[]{ "Header", "Cmds" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///*
  ///
  /// Some SI units.
  /// </summary>
  public enum Unit {
    [pbr::OriginalName("unit_undefined")] Undefined = 0,
    /// <summary>
    /// Length mask 0xf
    /// </summary>
    [pbr::OriginalName("Length")] Length = 15,
    /// <summary>
    /// millimeters 0x1
    /// </summary>
    [pbr::OriginalName("mm")] Mm = 1,
    /// <summary>
    /// meters 0x2
    /// </summary>
    [pbr::OriginalName("m")] M = 2,
    /// <summary>
    /// Angle mask 0xf1
    /// </summary>
    [pbr::OriginalName("Angle")] Angle = 241,
    /// <summary>
    /// radians 0x31
    /// </summary>
    [pbr::OriginalName("rad")] Rad = 49,
    /// <summary>
    /// degrees 0x41
    /// </summary>
    [pbr::OriginalName("deg")] Deg = 65,
    /// <summary>
    /// Time mask 0xf2
    /// </summary>
    [pbr::OriginalName("Time")] Time = 242,
    /// <summary>
    /// nanoseconds 0x12
    /// </summary>
    [pbr::OriginalName("nanosec")] Nanosec = 18,
    /// <summary>
    /// microseconds 0x22
    /// </summary>
    [pbr::OriginalName("microsec")] Microsec = 34,
    /// <summary>
    /// milliseconds 0x32
    /// </summary>
    [pbr::OriginalName("millisec")] Millisec = 50,
    /// <summary>
    /// seconds 0x42
    /// </summary>
    [pbr::OriginalName("sec")] Sec = 66,
    /// <summary>
    /// Weight mask 0xf3
    /// </summary>
    [pbr::OriginalName("Weight")] Weight = 243,
    /// <summary>
    /// grams 0x13
    /// </summary>
    [pbr::OriginalName("gram")] Gram = 19,
    /// <summary>
    /// kilograms 0x23
    /// </summary>
    [pbr::OriginalName("kg")] Kg = 35,
    /// <summary>
    /// Velocity mask 0xf4
    /// </summary>
    [pbr::OriginalName("Velocity")] Velocity = 244,
    /// <summary>
    /// linear velocity, meters per second 0x14
    /// </summary>
    [pbr::OriginalName("m_sec")] MSec = 20,
    /// <summary>
    /// angular velocity, radians per second 0x24
    /// </summary>
    [pbr::OriginalName("rad_sec")] RadSec = 36,
    /// <summary>
    /// Acceleration mask 0xf5
    /// </summary>
    [pbr::OriginalName("Acceleration")] Acceleration = 245,
    /// <summary>
    /// linear acceleration meters per second^2 0x15
    /// </summary>
    [pbr::OriginalName("m_sec2")] MSec2 = 21,
    /// <summary>
    /// angular acceleration radians per second^2 0x25
    /// </summary>
    [pbr::OriginalName("rad_sec2")] RadSec2 = 37,
    /// <summary>
    /// Force mask 0xf6
    /// </summary>
    [pbr::OriginalName("Force")] Force = 246,
    /// <summary>
    /// force, newtons 0x16
    /// </summary>
    [pbr::OriginalName("N")] N = 22,
    /// <summary>
    /// torque, newton-metres 0x26
    /// </summary>
    [pbr::OriginalName("Nm")] Nm = 38,
    /// <summary>
    /// percentages 0x17
    /// </summary>
    [pbr::OriginalName("percent")] Percent = 23,
  }

  /// <summary>
  ///*
  ///
  /// Available user groups.
  ///
  /// Group determines an access level of the user. Users can belong to one group: Administrator, Operator or Guest.
  /// System is reserved for internal motorcortex-core use.
  /// By default Operator cannot read or write Administrator's related parameters. The administrator has a full access
  /// to the Operator's data.
  ///
  /// Group access can be reconfigured in C++ server code or in the server configuration file. Furthermore, parameterization
  /// of the access can be done by setting permission level (Permission) of the parameter.
  /// </summary>
  public enum UserGroup {
    [pbr::OriginalName("user_group_undefined")] Undefined = 0,
    /// <summary>
    /// System group has full access. It is not available for the users.
    /// </summary>
    [pbr::OriginalName("SYSTEM")] System = 1,
    /// <summary>
    /// Administrator group has full access, except for system-level parameters.
    /// </summary>
    [pbr::OriginalName("ADMINISTRATOR")] Administrator = 3,
    /// <summary>
    /// Operator has limited write access and read access.
    /// </summary>
    [pbr::OriginalName("OPERATOR")] Operator = 7,
    /// <summary>
    /// Guest has read access.
    /// </summary>
    [pbr::OriginalName("GUEST")] Guest = 2147483647,
  }

  /// <summary>
  ///*
  ///
  /// Available parameters' permissions. Different users/groups may require access to different and/or protected parts of
  /// the parameter tree. Permission flags allow fine-tuning access levels of the groups. 
  ///
  /// The Motorcortex permissions structure is similar to that of Unix file permissions. Permissions are represented 
  /// either in symbolic notation or in octal notation. (Note: User rights are not yet implemented, instead use Group rights)
  ///
  /// For example:
  ///
  /// ---------- (0000): no permission
  ///
  /// -rwx------ (0700): read, write, &amp; execute only for owner (Note: currently not implemented, user group flags instead)
  ///
  /// -rwxrwx--- (0770): read, write, &amp; execute for owner and group (Note: execute flag is used as a permission to open folders)
  ///
  /// -rwxrwxr-x (0775): read, write, &amp; execute for owner and group, read &amp; execute for all others.
  ///
  /// -rwxrwxrwx (0777): full access
  /// </summary>
  public enum Permission {
    [pbr::OriginalName("permission_undefined")] Undefined = 0,
    /// <summary>
    /// owner user read -r--------
    /// </summary>
    [pbr::OriginalName("USER_READ")] UserRead = 256,
    /// <summary>
    /// owner user write --w-------
    /// </summary>
    [pbr::OriginalName("USER_WRITE")] UserWrite = 128,
    /// <summary>
    /// owner user execute ---e------
    /// </summary>
    [pbr::OriginalName("USER_EXECUTE")] UserExecute = 64,
    /// <summary>
    /// owner group read ----r-----
    /// </summary>
    [pbr::OriginalName("GROUP_READ")] GroupRead = 32,
    /// <summary>
    /// owner group write -----w----
    /// </summary>
    [pbr::OriginalName("GROUP_WRITE")] GroupWrite = 16,
    /// <summary>
    /// owner group execute ------e---
    /// </summary>
    [pbr::OriginalName("GROUP_EXECUTE")] GroupExecute = 8,
    /// <summary>
    /// other users read -------r--
    /// </summary>
    [pbr::OriginalName("OTHERS_READ")] OthersRead = 4,
    /// <summary>
    /// other users write --------w-
    /// </summary>
    [pbr::OriginalName("OTHERS_WRITE")] OthersWrite = 2,
    /// <summary>
    /// other users ---------e
    /// </summary>
    [pbr::OriginalName("OTHERS_EXECUTE")] OthersExecute = 1,
  }

  /// <summary>
  ///*
  ///
  /// Available data types.
  ///
  /// Data types supported by a parameter server.
  ///
  /// User data types can be added after the tag USER_TYPE.
  /// </summary>
  public enum DataType {
    [pbr::OriginalName("data_type_undefined")] Undefined = 0,
    /// <summary>
    /// integer 1 byte
    /// </summary>
    [pbr::OriginalName("INT8")] Int8 = 1,
    /// <summary>
    /// unsigned integer 1 byte
    /// </summary>
    [pbr::OriginalName("UINT8")] Uint8 = 2,
    /// <summary>
    /// short int
    /// </summary>
    [pbr::OriginalName("INT16")] Int16 = 3,
    /// <summary>
    /// unsigned short int
    /// </summary>
    [pbr::OriginalName("UINT16")] Uint16 = 4,
    /// <summary>
    /// int
    /// </summary>
    [pbr::OriginalName("INT32")] Int32 = 5,
    /// <summary>
    /// unsigned int
    /// </summary>
    [pbr::OriginalName("UINT32")] Uint32 = 6,
    /// <summary>
    /// long
    /// </summary>
    [pbr::OriginalName("INT64")] Int64 = 7,
    /// <summary>
    /// unsigned long
    /// </summary>
    [pbr::OriginalName("UINT64")] Uint64 = 8,
    /// <summary>
    /// boolean
    /// </summary>
    [pbr::OriginalName("BOOL")] Bool = 9,
    /// <summary>
    /// float
    /// </summary>
    [pbr::OriginalName("FLOAT")] Float = 257,
    /// <summary>
    /// double
    /// </summary>
    [pbr::OriginalName("DOUBLE")] Double = 258,
    /// <summary>
    /// char
    /// </summary>
    [pbr::OriginalName("CHAR")] Char = 513,
    /// <summary>
    /// C-string
    /// </summary>
    [pbr::OriginalName("STRING")] String = 514,
    /// <summary>
    /// bytes array
    /// </summary>
    [pbr::OriginalName("BYTES")] Bytes = 1177,
    /// <summary>
    /// end of the system types
    /// </summary>
    [pbr::OriginalName("USER_TYPE")] UserType = 1280,
  }

  /// <summary>
  ///*
  ///
  /// Parameter's IO types.
  ///
  /// Each parameter in the tree can be an INPUT, an OUTPUT or a PARAMETER.
  ///
  /// PARAMETER type is both an input and output, it can be saved and loaded from the disk.
  ///
  /// Value of a parameter with OUTPUT type cannot be set, but can be overwritten (forced). Force operation
  /// on the OUTPUT will only change the parameter value on everything that is linked to it. It will
  /// NOT change the internal value of the block to which the output belongs.
  /// </summary>
  public enum ParameterType {
    [pbr::OriginalName("param_type_undefined")] ParamTypeUndefined = 0,
    /// <summary>
    /// Input parameter.
    /// </summary>
    [pbr::OriginalName("INPUT")] Input = 1,
    /// <summary>
    /// Output parameter.
    /// </summary>
    [pbr::OriginalName("OUTPUT")] Output = 16,
    /// <summary>
    /// Input/output parameter, which is saved and loaded from the disk on request.
    /// </summary>
    [pbr::OriginalName("PARAMETER")] Parameter = 256,
    /// <summary>
    /// Input/output parameter, which is valotile, not saved or loaded from the disk.
    /// </summary>
    [pbr::OriginalName("PARAMETER_VOLATILE")] ParameterVolatile = 257,
    /// <summary>
    /// Input/output parameter, which is persistent, continuously saved and loaded from the disk.
    /// </summary>
    [pbr::OriginalName("PARAMETER_PERSISTENT")] ParameterPersistent = 258,
  }

  /// <summary>
  ///*
  ///
  /// Return status codes.
  ///
  /// Return status codes are included in the reply for every user's request. Using these
  /// codes user can verify if request was successful or there was a failure.
  /// </summary>
  public enum StatusCode {
    /// <summary>
    /// Request was processed successfully.
    /// </summary>
    [pbr::OriginalName("OK")] Ok = 0,
    /// <summary>
    /// Login is successful, but user has read-only right.
    /// </summary>
    [pbr::OriginalName("READ_ONLY_MODE")] ReadOnlyMode = 1,
    /// <summary>
    /// Generic failure mask.
    /// </summary>
    [pbr::OriginalName("FAILED")] Failed = 65280,
    /// <summary>
    /// Failed to decode request message.
    /// </summary>
    [pbr::OriginalName("FAILED_TO_DECODE")] FailedToDecode = 4096,
    /// <summary>
    /// Failed to subscribe for a parameter, because subscription list is full. Create new parameter group.
    /// </summary>
    [pbr::OriginalName("SUB_LIST_IS_FULL")] SubListIsFull = 4352,
    /// <summary>
    /// Failed to find parameter, because requested path is wrong.
    /// </summary>
    [pbr::OriginalName("WRONG_PARAMETER_PATH")] WrongParameterPath = 4608,
    /// <summary>
    /// When several clients share the same publisher's group, original publishing frequency is preserved.
    /// </summary>
    [pbr::OriginalName("FAILED_TO_SET_REQUESTED_FRQ")] FailedToSetRequestedFrq = 4864,
    /// <summary>
    /// Failed to open/save/load a file.
    /// </summary>
    [pbr::OriginalName("FAILED_TO_OPEN_FILE")] FailedToOpenFile = 5120,
    /// <summary>
    /// Failed to create new group, because the group list is full. Release at least one group.
    /// </summary>
    [pbr::OriginalName("GROUP_LIST_IS_FULL")] GroupListIsFull = 5376,
    /// <summary>
    /// Login failed, wrong login or password.
    /// </summary>
    [pbr::OriginalName("WRONG_PASSWORD")] WrongPassword = 8448,
    /// <summary>
    /// Operation not permitted, because user is not logged in.
    /// </summary>
    [pbr::OriginalName("USER_NOT_LOGGED_IN")] UserNotLoggedIn = 8704,
    /// <summary>
    /// Permission denied because user has no access rights.
    /// </summary>
    [pbr::OriginalName("PERMISSION_DENIED")] PermissionDenied = 8960,
  }

  /// <summary>
  ///*
  ///
  /// Available error levels.
  ///
  /// Generic user levels generated by the logic. (Note: Check examples of the state machine.)
  /// </summary>
  public enum ErrorLevel {
    [pbr::OriginalName("error_level_undefined")] Undefined = 0,
    /// <summary>
    /// Information message.
    /// </summary>
    [pbr::OriginalName("INFO")] Info = 1,
    /// <summary>
    /// Warning message.
    /// </summary>
    [pbr::OriginalName("WARNING")] Warning = 2,
    /// <summary>
    /// Graceful software stop, caused by a hardware malfunction or a wrong user actions.
    /// </summary>
    [pbr::OriginalName("FORCED_DISENGAGE")] ForcedDisengage = 3,
    /// <summary>
    /// More abrupt software stop, caused by a hardware malfunction.
    /// </summary>
    [pbr::OriginalName("SHUTDOWN")] Shutdown = 4,
    /// <summary>
    /// Abrupt software and hardware stop, caused by a hardware malfunction.
    /// </summary>
    [pbr::OriginalName("EMERGENCY_STOP")] EmergencyStop = 5,
  }

  /// <summary>
  ///*
  /// 
  /// Avaliable offset types.
  ///
  /// When setting a parameter value user can specify an offset and length
  /// </summary>
  public enum OffsetType {
    [pbr::OriginalName("offset_type_undefined")] Undefined = 0,
    /// <summary>
    /// Offset and length is calculated in the elements. For example update an array starting from the element number 3.
    /// </summary>
    [pbr::OriginalName("OFFSET_ELEMENTS")] OffsetElements = 1,
    /// <summary>
    /// Offset and length is calculated in bytes.
    /// </summary>
    [pbr::OriginalName("OFFSET_BYTES")] OffsetBytes = 2,
    /// <summary>
    /// Offset and length is calculated in bits.
    /// </summary>
    [pbr::OriginalName("OFFSET_BITS")] OffsetBits = 3,
  }

  /// <summary>
  ///*
  ///
  /// System parameter's flag
  ///
  /// Parameter can have various system flags, which shows that it is been overwritten or linked.
  /// (Note: This list will grow in future)
  /// </summary>
  public enum ParameterFlag {
    /// <summary>
    /// Parameter is linked to another parameter.
    /// </summary>
    [pbr::OriginalName("LINK_IS_ACTIVE")] LinkIsActive = 1,
    /// <summary>
    /// Parameter is being overwritten.
    /// </summary>
    [pbr::OriginalName("OVERWRITE_IS_ACTIVE")] OverwriteIsActive = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///*
  /// 
  /// ParameterOffset description.
  ///
  /// An offset can be applied when setting a new value of the parameter array
  /// </summary>
  public sealed partial class ParameterOffset : pb::IMessage<ParameterOffset> {
    private static readonly pb::MessageParser<ParameterOffset> _parser = new pb::MessageParser<ParameterOffset>(() => new ParameterOffset());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParameterOffset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterOffset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterOffset(ParameterOffset other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      offset_ = other.offset_;
      length_ = other.length_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterOffset Clone() {
      return new ParameterOffset(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::Motorcortex.OffsetType TypeDefaultValue = global::Motorcortex.OffsetType.OffsetElements;

    private global::Motorcortex.OffsetType type_;
    /// <summary>
    /// Type of the offset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.OffsetType Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private readonly static uint OffsetDefaultValue = 0;

    private uint offset_;
    /// <summary>
    /// Starting point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Offset {
      get { if ((_hasBits0 & 2) != 0) { return offset_; } else { return OffsetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        offset_ = value;
      }
    }
    /// <summary>Gets whether the "offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOffset {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOffset() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 3;
    private readonly static uint LengthDefaultValue = 0;

    private uint length_;
    /// <summary>
    /// Length from starting point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Length {
      get { if ((_hasBits0 & 4) != 0) { return length_; } else { return LengthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        length_ = value;
      }
    }
    /// <summary>Gets whether the "length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLength {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLength() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParameterOffset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParameterOffset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Offset != other.Offset) return false;
      if (Length != other.Length) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasOffset) hash ^= Offset.GetHashCode();
      if (HasLength) hash ^= Length.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasOffset) {
        output.WriteRawTag(16);
        output.WriteUInt32(Offset);
      }
      if (HasLength) {
        output.WriteRawTag(24);
        output.WriteUInt32(Length);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasOffset) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Offset);
      }
      if (HasLength) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParameterOffset other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasOffset) {
        Offset = other.Offset;
      }
      if (other.HasLength) {
        Length = other.Length;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Motorcortex.OffsetType) input.ReadEnum();
            break;
          }
          case 16: {
            Offset = input.ReadUInt32();
            break;
          }
          case 24: {
            Length = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Error description.
  ///
  /// System type, which describes an error.
  /// </summary>
  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      errorNumber_ = other.errorNumber_;
      errorLevel_ = other.errorLevel_;
      subsystem_ = other.subsystem_;
      info_ = other.info_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static ulong TimestampDefaultValue = 0UL;

    private ulong timestamp_;
    /// <summary>
    /// System time, when error occurred.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "error_number" field.</summary>
    public const int ErrorNumberFieldNumber = 2;
    private readonly static uint ErrorNumberDefaultValue = 0;

    private uint errorNumber_;
    /// <summary>
    /// Error code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorNumber {
      get { if ((_hasBits0 & 2) != 0) { return errorNumber_; } else { return ErrorNumberDefaultValue; } }
      set {
        _hasBits0 |= 2;
        errorNumber_ = value;
      }
    }
    /// <summary>Gets whether the "error_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorNumber {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "error_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorNumber() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "error_level" field.</summary>
    public const int ErrorLevelFieldNumber = 3;
    private readonly static uint ErrorLevelDefaultValue = 0;

    private uint errorLevel_;
    /// <summary>
    /// Error level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorLevel {
      get { if ((_hasBits0 & 4) != 0) { return errorLevel_; } else { return ErrorLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        errorLevel_ = value;
      }
    }
    /// <summary>Gets whether the "error_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "error_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "subsystem" field.</summary>
    public const int SubsystemFieldNumber = 4;
    private readonly static uint SubsystemDefaultValue = 0;

    private uint subsystem_;
    /// <summary>
    /// Subsystem, for example 1 is 1st actuator of the system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Subsystem {
      get { if ((_hasBits0 & 8) != 0) { return subsystem_; } else { return SubsystemDefaultValue; } }
      set {
        _hasBits0 |= 8;
        subsystem_ = value;
      }
    }
    /// <summary>Gets whether the "subsystem" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubsystem {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "subsystem" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubsystem() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 5;
    private readonly static uint InfoDefaultValue = 0;

    private uint info_;
    /// <summary>
    /// Additional error code, provided by hardware.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Info {
      get { if ((_hasBits0 & 16) != 0) { return info_; } else { return InfoDefaultValue; } }
      set {
        _hasBits0 |= 16;
        info_ = value;
      }
    }
    /// <summary>Gets whether the "info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInfo {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInfo() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (ErrorNumber != other.ErrorNumber) return false;
      if (ErrorLevel != other.ErrorLevel) return false;
      if (Subsystem != other.Subsystem) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasErrorNumber) hash ^= ErrorNumber.GetHashCode();
      if (HasErrorLevel) hash ^= ErrorLevel.GetHashCode();
      if (HasSubsystem) hash ^= Subsystem.GetHashCode();
      if (HasInfo) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTimestamp) {
        output.WriteRawTag(9);
        output.WriteFixed64(Timestamp);
      }
      if (HasErrorNumber) {
        output.WriteRawTag(21);
        output.WriteFixed32(ErrorNumber);
      }
      if (HasErrorLevel) {
        output.WriteRawTag(29);
        output.WriteFixed32(ErrorLevel);
      }
      if (HasSubsystem) {
        output.WriteRawTag(37);
        output.WriteFixed32(Subsystem);
      }
      if (HasInfo) {
        output.WriteRawTag(45);
        output.WriteFixed32(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + 8;
      }
      if (HasErrorNumber) {
        size += 1 + 4;
      }
      if (HasErrorLevel) {
        size += 1 + 4;
      }
      if (HasSubsystem) {
        size += 1 + 4;
      }
      if (HasInfo) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasErrorNumber) {
        ErrorNumber = other.ErrorNumber;
      }
      if (other.HasErrorLevel) {
        ErrorLevel = other.ErrorLevel;
      }
      if (other.HasSubsystem) {
        Subsystem = other.Subsystem;
      }
      if (other.HasInfo) {
        Info = other.Info;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Timestamp = input.ReadFixed64();
            break;
          }
          case 21: {
            ErrorNumber = input.ReadFixed32();
            break;
          }
          case 29: {
            ErrorLevel = input.ReadFixed32();
            break;
          }
          case 37: {
            Subsystem = input.ReadFixed32();
            break;
          }
          case 45: {
            Info = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// List of errors.
  ///
  /// Error messages are sent to the client as a list of N active errors.
  /// </summary>
  public sealed partial class ErrorList : pb::IMessage<ErrorList> {
    private static readonly pb::MessageParser<ErrorList> _parser = new pb::MessageParser<ErrorList>(() => new ErrorList());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorList(ErrorList other) : this() {
      _hasBits0 = other._hasBits0;
      errors_ = other.errors_.Clone();
      numberOfErrors_ = other.numberOfErrors_;
      updateCounter_ = other.updateCounter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorList Clone() {
      return new ErrorList(this);
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Motorcortex.Error> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(10, global::Motorcortex.Error.Parser);
    private readonly pbc::RepeatedField<global::Motorcortex.Error> errors_ = new pbc::RepeatedField<global::Motorcortex.Error>();
    /// <summary>
    /// List of active errors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Motorcortex.Error> Errors {
      get { return errors_; }
    }

    /// <summary>Field number for the "number_of_errors" field.</summary>
    public const int NumberOfErrorsFieldNumber = 2;
    private readonly static uint NumberOfErrorsDefaultValue = 0;

    private uint numberOfErrors_;
    /// <summary>
    /// Number of errors in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumberOfErrors {
      get { if ((_hasBits0 & 1) != 0) { return numberOfErrors_; } else { return NumberOfErrorsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        numberOfErrors_ = value;
      }
    }
    /// <summary>Gets whether the "number_of_errors" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNumberOfErrors {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "number_of_errors" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumberOfErrors() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "update_counter" field.</summary>
    public const int UpdateCounterFieldNumber = 3;
    private readonly static uint UpdateCounterDefaultValue = 0;

    private uint updateCounter_;
    /// <summary>
    /// An update couter changes everytime the list of active errors is updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UpdateCounter {
      get { if ((_hasBits0 & 2) != 0) { return updateCounter_; } else { return UpdateCounterDefaultValue; } }
      set {
        _hasBits0 |= 2;
        updateCounter_ = value;
      }
    }
    /// <summary>Gets whether the "update_counter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUpdateCounter {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "update_counter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpdateCounter() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!errors_.Equals(other.errors_)) return false;
      if (NumberOfErrors != other.NumberOfErrors) return false;
      if (UpdateCounter != other.UpdateCounter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= errors_.GetHashCode();
      if (HasNumberOfErrors) hash ^= NumberOfErrors.GetHashCode();
      if (HasUpdateCounter) hash ^= UpdateCounter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      errors_.WriteTo(output, _repeated_errors_codec);
      if (HasNumberOfErrors) {
        output.WriteRawTag(21);
        output.WriteFixed32(NumberOfErrors);
      }
      if (HasUpdateCounter) {
        output.WriteRawTag(29);
        output.WriteFixed32(UpdateCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (HasNumberOfErrors) {
        size += 1 + 4;
      }
      if (HasUpdateCounter) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorList other) {
      if (other == null) {
        return;
      }
      errors_.Add(other.errors_);
      if (other.HasNumberOfErrors) {
        NumberOfErrors = other.NumberOfErrors;
      }
      if (other.HasUpdateCounter) {
        UpdateCounter = other.UpdateCounter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
          case 21: {
            NumberOfErrors = input.ReadFixed32();
            break;
          }
          case 29: {
            UpdateCounter = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Parameter information fields.
  ///
  /// Active state of the parameter in the tree, including its name, size, data type, io type and active flags.
  /// </summary>
  public sealed partial class ParameterInfo : pb::IMessage<ParameterInfo> {
    private static readonly pb::MessageParser<ParameterInfo> _parser = new pb::MessageParser<ParameterInfo>(() => new ParameterInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParameterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterInfo(ParameterInfo other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      dataType_ = other.dataType_;
      dataSize_ = other.dataSize_;
      numberOfElements_ = other.numberOfElements_;
      flags_ = other.flags_;
      permissions_ = other.permissions_;
      paramType_ = other.paramType_;
      groupId_ = other.groupId_;
      unit_ = other.unit_;
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterInfo Clone() {
      return new ParameterInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    /// Unique id, assigned by parameter server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static uint DataTypeDefaultValue = 0;

    private uint dataType_;
    /// <summary>
    /// Tag of the data type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "data_size" field.</summary>
    public const int DataSizeFieldNumber = 3;
    private readonly static uint DataSizeDefaultValue = 0;

    private uint dataSize_;
    /// <summary>
    /// Size of one data element.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataSize {
      get { if ((_hasBits0 & 4) != 0) { return dataSize_; } else { return DataSizeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        dataSize_ = value;
      }
    }
    /// <summary>Gets whether the "data_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDataSize {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "data_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataSize() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "number_of_elements" field.</summary>
    public const int NumberOfElementsFieldNumber = 4;
    private readonly static uint NumberOfElementsDefaultValue = 0;

    private uint numberOfElements_;
    /// <summary>
    /// Number of the elements.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumberOfElements {
      get { if ((_hasBits0 & 8) != 0) { return numberOfElements_; } else { return NumberOfElementsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        numberOfElements_ = value;
      }
    }
    /// <summary>Gets whether the "number_of_elements" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNumberOfElements {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "number_of_elements" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumberOfElements() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 5;
    private readonly static uint FlagsDefaultValue = 0;

    private uint flags_;
    /// <summary>
    /// Parameter flags (overwrite, link etc...).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { if ((_hasBits0 & 16) != 0) { return flags_; } else { return FlagsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        flags_ = value;
      }
    }
    /// <summary>Gets whether the "flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlags {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlags() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 6;
    private readonly static uint PermissionsDefaultValue = 0;

    private uint permissions_;
    /// <summary>
    /// Access permissions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Permissions {
      get { if ((_hasBits0 & 32) != 0) { return permissions_; } else { return PermissionsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        permissions_ = value;
      }
    }
    /// <summary>Gets whether the "permissions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPermissions {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "permissions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPermissions() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "param_type" field.</summary>
    public const int ParamTypeFieldNumber = 7;
    private readonly static global::Motorcortex.ParameterType ParamTypeDefaultValue = global::Motorcortex.ParameterType.ParamTypeUndefined;

    private global::Motorcortex.ParameterType paramType_;
    /// <summary>
    /// I/O type of the parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.ParameterType ParamType {
      get { if ((_hasBits0 & 64) != 0) { return paramType_; } else { return ParamTypeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        paramType_ = value;
      }
    }
    /// <summary>Gets whether the "param_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParamType {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "param_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParamType() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 8;
    private readonly static global::Motorcortex.UserGroup GroupIdDefaultValue = global::Motorcortex.UserGroup.Undefined;

    private global::Motorcortex.UserGroup groupId_;
    /// <summary>
    /// Group ID of the owner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.UserGroup GroupId {
      get { if ((_hasBits0 & 128) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 128;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "group_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "group_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 9;
    private readonly static global::Motorcortex.Unit UnitDefaultValue = global::Motorcortex.Unit.Undefined;

    private global::Motorcortex.Unit unit_;
    /// <summary>
    /// SI unit of the parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Unit Unit {
      get { if ((_hasBits0 & 256) != 0) { return unit_; } else { return UnitDefaultValue; } }
      set {
        _hasBits0 |= 256;
        unit_ = value;
      }
    }
    /// <summary>Gets whether the "unit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnit {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "unit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnit() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 10;
    private readonly static string PathDefaultValue = "";

    private string path_;
    /// <summary>
    /// Path (including name) of the parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_ ?? PathDefaultValue; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPath {
      get { return path_ != null; }
    }
    /// <summary>Clears the value of the "path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPath() {
      path_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParameterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParameterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DataType != other.DataType) return false;
      if (DataSize != other.DataSize) return false;
      if (NumberOfElements != other.NumberOfElements) return false;
      if (Flags != other.Flags) return false;
      if (Permissions != other.Permissions) return false;
      if (ParamType != other.ParamType) return false;
      if (GroupId != other.GroupId) return false;
      if (Unit != other.Unit) return false;
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (HasDataSize) hash ^= DataSize.GetHashCode();
      if (HasNumberOfElements) hash ^= NumberOfElements.GetHashCode();
      if (HasFlags) hash ^= Flags.GetHashCode();
      if (HasPermissions) hash ^= Permissions.GetHashCode();
      if (HasParamType) hash ^= ParamType.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasUnit) hash ^= Unit.GetHashCode();
      if (HasPath) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteUInt32(DataType);
      }
      if (HasDataSize) {
        output.WriteRawTag(24);
        output.WriteUInt32(DataSize);
      }
      if (HasNumberOfElements) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumberOfElements);
      }
      if (HasFlags) {
        output.WriteRawTag(40);
        output.WriteUInt32(Flags);
      }
      if (HasPermissions) {
        output.WriteRawTag(48);
        output.WriteUInt32(Permissions);
      }
      if (HasParamType) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ParamType);
      }
      if (HasGroupId) {
        output.WriteRawTag(64);
        output.WriteEnum((int) GroupId);
      }
      if (HasUnit) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Unit);
      }
      if (HasPath) {
        output.WriteRawTag(82);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataType);
      }
      if (HasDataSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSize);
      }
      if (HasNumberOfElements) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfElements);
      }
      if (HasFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (HasPermissions) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Permissions);
      }
      if (HasParamType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ParamType);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GroupId);
      }
      if (HasUnit) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (HasPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParameterInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.HasDataSize) {
        DataSize = other.DataSize;
      }
      if (other.HasNumberOfElements) {
        NumberOfElements = other.NumberOfElements;
      }
      if (other.HasFlags) {
        Flags = other.Flags;
      }
      if (other.HasPermissions) {
        Permissions = other.Permissions;
      }
      if (other.HasParamType) {
        ParamType = other.ParamType;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasUnit) {
        Unit = other.Unit;
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            DataType = input.ReadUInt32();
            break;
          }
          case 24: {
            DataSize = input.ReadUInt32();
            break;
          }
          case 32: {
            NumberOfElements = input.ReadUInt32();
            break;
          }
          case 40: {
            Flags = input.ReadUInt32();
            break;
          }
          case 48: {
            Permissions = input.ReadUInt32();
            break;
          }
          case 56: {
            ParamType = (global::Motorcortex.ParameterType) input.ReadEnum();
            break;
          }
          case 64: {
            GroupId = (global::Motorcortex.UserGroup) input.ReadEnum();
            break;
          }
          case 72: {
            Unit = (global::Motorcortex.Unit) input.ReadEnum();
            break;
          }
          case 82: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Parameters' group information.
  ///
  /// This data type represents the subscription information, required to decode parameters from the group message.
  /// </summary>
  public sealed partial class GroupParameterInfo : pb::IMessage<GroupParameterInfo> {
    private static readonly pb::MessageParser<GroupParameterInfo> _parser = new pb::MessageParser<GroupParameterInfo>(() => new GroupParameterInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupParameterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupParameterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupParameterInfo(GroupParameterInfo other) : this() {
      _hasBits0 = other._hasBits0;
      index_ = other.index_;
      offset_ = other.offset_;
      size_ = other.size_;
      info_ = other.info_ != null ? other.info_.Clone() : null;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupParameterInfo Clone() {
      return new GroupParameterInfo(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private readonly static uint IndexDefaultValue = 0;

    private uint index_;
    /// <summary>
    /// Index of the subscribed parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { if ((_hasBits0 & 1) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private readonly static uint OffsetDefaultValue = 0;

    private uint offset_;
    /// <summary>
    /// Offset in the group message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Offset {
      get { if ((_hasBits0 & 2) != 0) { return offset_; } else { return OffsetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        offset_ = value;
      }
    }
    /// <summary>Gets whether the "offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOffset {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOffset() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private readonly static uint SizeDefaultValue = 0;

    private uint size_;
    /// <summary>
    /// Size of the parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { if ((_hasBits0 & 4) != 0) { return size_; } else { return SizeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        size_ = value;
      }
    }
    /// <summary>Gets whether the "size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSize {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSize() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private global::Motorcortex.ParameterInfo info_;
    /// <summary>
    /// Parameter information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.ParameterInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private readonly static global::Motorcortex.StatusCode StatusDefaultValue = global::Motorcortex.StatusCode.Ok;

    private global::Motorcortex.StatusCode status_;
    /// <summary>
    /// Status code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.StatusCode Status {
      get { if ((_hasBits0 & 8) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 8;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupParameterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupParameterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Offset != other.Offset) return false;
      if (Size != other.Size) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasOffset) hash ^= Offset.GetHashCode();
      if (HasSize) hash ^= Size.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (HasOffset) {
        output.WriteRawTag(16);
        output.WriteUInt32(Offset);
      }
      if (HasSize) {
        output.WriteRawTag(24);
        output.WriteUInt32(Size);
      }
      if (info_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Info);
      }
      if (HasStatus) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (HasOffset) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Offset);
      }
      if (HasSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupParameterInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasOffset) {
        Offset = other.Offset;
      }
      if (other.HasSize) {
        Size = other.Size;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Motorcortex.ParameterInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 16: {
            Offset = input.ReadUInt32();
            break;
          }
          case 24: {
            Size = input.ReadUInt32();
            break;
          }
          case 34: {
            if (info_ == null) {
              Info = new global::Motorcortex.ParameterInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 40: {
            Status = (global::Motorcortex.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Generic message header, included in the request/reply messages.
  /// </summary>
  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      _hasBits0 = other._hasBits0;
      frameCounter_ = other.frameCounter_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "frameCounter" field.</summary>
    public const int FrameCounterFieldNumber = 1;
    private readonly static uint FrameCounterDefaultValue = 0;

    private uint frameCounter_;
    /// <summary>
    /// Frame counter counts number of parameter updates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameCounter {
      get { if ((_hasBits0 & 1) != 0) { return frameCounter_; } else { return FrameCounterDefaultValue; } }
      set {
        _hasBits0 |= 1;
        frameCounter_ = value;
      }
    }
    /// <summary>Gets whether the "frameCounter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFrameCounter {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "frameCounter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFrameCounter() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private readonly static ulong TimestampDefaultValue = 0UL;

    private ulong timestamp_;
    /// <summary>
    /// Current server time in the format: microseconds from 1 Jan 2000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { if ((_hasBits0 & 2) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 2;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameCounter != other.FrameCounter) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFrameCounter) hash ^= FrameCounter.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasFrameCounter) {
        output.WriteRawTag(13);
        output.WriteFixed32(FrameCounter);
      }
      if (HasTimestamp) {
        output.WriteRawTag(17);
        output.WriteFixed64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFrameCounter) {
        size += 1 + 4;
      }
      if (HasTimestamp) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.HasFrameCounter) {
        FrameCounter = other.FrameCounter;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            FrameCounter = input.ReadFixed32();
            break;
          }
          case 17: {
            Timestamp = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Group message, used by the publisher. (Note: currently is not used, since publisher is not using protobuf)
  /// </summary>
  public sealed partial class GroupMsg : pb::IMessage<GroupMsg> {
    private static readonly pb::MessageParser<GroupMsg> _parser = new pb::MessageParser<GroupMsg>(() => new GroupMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMsg(GroupMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      params_ = other.params_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMsg Clone() {
      return new GroupMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Motorcortex.ParameterMsg> _repeated_params_codec
        = pb::FieldCodec.ForMessage(18, global::Motorcortex.ParameterMsg.Parser);
    private readonly pbc::RepeatedField<global::Motorcortex.ParameterMsg> params_ = new pbc::RepeatedField<global::Motorcortex.ParameterMsg>();
    /// <summary>
    /// List of published parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Motorcortex.ParameterMsg> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!params_.Equals(other.params_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= params_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      params_.Add(other.params_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Status code message.
  ///
  /// Reply with a status code for various request messages.
  /// </summary>
  public sealed partial class StatusMsg : pb::IMessage<StatusMsg> {
    private static readonly pb::MessageParser<StatusMsg> _parser = new pb::MessageParser<StatusMsg>(() => new StatusMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMsg(StatusMsg other) : this() {
      _hasBits0 = other._hasBits0;
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMsg Clone() {
      return new StatusMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private readonly static global::Motorcortex.StatusCode StatusDefaultValue = global::Motorcortex.StatusCode.Ok;

    private global::Motorcortex.StatusCode status_;
    /// <summary>
    /// Return status of the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.StatusCode Status {
      get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasStatus) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Motorcortex.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Login request.
  ///
  /// User request to get access to the parameter tree.
  ///
  /// Server's reply: StatusMsg, with following status codes:
  ///
  /// StatusCode::OK - user is logged in,
  ///
  /// StatusCode::READ_ONLY_MODE - user is logged in, read only mode,
  ///
  /// StatusCode::WRONG_PASSWORD - login failed, wrong login or password.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class LoginMsg : pb::IMessage<LoginMsg> {
    private static readonly pb::MessageParser<LoginMsg> _parser = new pb::MessageParser<LoginMsg>(() => new LoginMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginMsg(LoginMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      login_ = other.login_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginMsg Clone() {
      return new LoginMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "login" field.</summary>
    public const int LoginFieldNumber = 2;
    private readonly static string LoginDefaultValue = "";

    private string login_;
    /// <summary>
    /// User's login.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Login {
      get { return login_ ?? LoginDefaultValue; }
      set {
        login_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "login" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLogin {
      get { return login_ != null; }
    }
    /// <summary>Clears the value of the "login" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLogin() {
      login_ = null;
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private readonly static string PasswordDefaultValue = "";

    private string password_;
    /// <summary>
    /// User's password.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_ ?? PasswordDefaultValue; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "password" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPassword {
      get { return password_ != null; }
    }
    /// <summary>Clears the value of the "password" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPassword() {
      password_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Login != other.Login) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasLogin) hash ^= Login.GetHashCode();
      if (HasPassword) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasLogin) {
        output.WriteRawTag(18);
        output.WriteString(Login);
      }
      if (HasPassword) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasLogin) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Login);
      }
      if (HasPassword) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasLogin) {
        Login = other.Login;
      }
      if (other.HasPassword) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Login = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request a session token.
  ///
  /// After user is logged-in it can request a session token for re-login.
  ///
  /// Server's reply: SessionTokenMsg with the token status code. 
  /// </summary>
  public sealed partial class GetSessionTokenMsg : pb::IMessage<GetSessionTokenMsg> {
    private static readonly pb::MessageParser<GetSessionTokenMsg> _parser = new pb::MessageParser<GetSessionTokenMsg>(() => new GetSessionTokenMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSessionTokenMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionTokenMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionTokenMsg(GetSessionTokenMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionTokenMsg Clone() {
      return new GetSessionTokenMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSessionTokenMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSessionTokenMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSessionTokenMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Session token.
  ///
  /// A token with current session id. The toke is used for re-logging if 
  /// the connection is lost.
  ///
  /// Server's reply: SessionTokenmsg with the token and one of the following 
  /// status codes:
  ///
  /// StatusCode::OK - token is granted,
  ///
  /// StatusCode::PERMISSION_DENIED - user has no permission,
  ///
  /// StatusCode::FAILED - operation failed,
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class SessionTokenMsg : pb::IMessage<SessionTokenMsg> {
    private static readonly pb::MessageParser<SessionTokenMsg> _parser = new pb::MessageParser<SessionTokenMsg>(() => new SessionTokenMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SessionTokenMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionTokenMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionTokenMsg(SessionTokenMsg other) : this() {
      _hasBits0 = other._hasBits0;
      header_ = other.header_ != null ? other.header_.Clone() : null;
      token_ = other.token_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionTokenMsg Clone() {
      return new SessionTokenMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private readonly static string TokenDefaultValue = "";

    private string token_;
    /// <summary>
    /// Session token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_ ?? TokenDefaultValue; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToken {
      get { return token_ != null; }
    }
    /// <summary>Clears the value of the "token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToken() {
      token_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private readonly static global::Motorcortex.StatusCode StatusDefaultValue = global::Motorcortex.StatusCode.Ok;

    private global::Motorcortex.StatusCode status_;
    /// <summary>
    /// Status code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.StatusCode Status {
      get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SessionTokenMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SessionTokenMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Token != other.Token) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasToken) hash ^= Token.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasToken) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (HasStatus) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasToken) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SessionTokenMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasToken) {
        Token = other.Token;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            Status = (global::Motorcortex.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Restore session request.
  ///
  /// User request to restore the old session to access to the parameter tree.
  ///
  /// Server's reply: StatusMsg, with following status codes:
  ///
  /// StatusCode::OK - user is logged in,
  ///
  /// StatusCode::READ_ONLY_MODE - user is logged in, read only mode,
  ///
  /// StatusCode::PERMISSION_DENIED - login failed, token expired,
  ///
  /// StatusCode::FAILED - operation failed,
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class RestoreSessionMsg : pb::IMessage<RestoreSessionMsg> {
    private static readonly pb::MessageParser<RestoreSessionMsg> _parser = new pb::MessageParser<RestoreSessionMsg>(() => new RestoreSessionMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreSessionMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreSessionMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreSessionMsg(RestoreSessionMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreSessionMsg Clone() {
      return new RestoreSessionMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private readonly static string TokenDefaultValue = "";

    private string token_;
    /// <summary>
    /// Session token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_ ?? TokenDefaultValue; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToken {
      get { return token_ != null; }
    }
    /// <summary>Clears the value of the "token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToken() {
      token_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreSessionMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreSessionMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasToken) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasToken) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasToken) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreSessionMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasToken) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Logout request.
  ///
  /// User request to exit. Logout will happen automatically if user is disconnected.
  ///
  /// Server's reply: StatusMsg, with following status codes:
  ///
  /// StatusCode::OK - user is logged out,
  ///
  /// StatusCode::FAILED - operation failed,
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class LogoutMsg : pb::IMessage<LogoutMsg> {
    private static readonly pb::MessageParser<LogoutMsg> _parser = new pb::MessageParser<LogoutMsg>(() => new LogoutMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutMsg(LogoutMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutMsg Clone() {
      return new LogoutMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to get a parameter tree message
  ///
  /// Server's reply: ParameterTreeMsg, with following status codes:
  ///
  /// StatusCode::OK - user is logged out,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class GetParameterTreeMsg : pb::IMessage<GetParameterTreeMsg> {
    private static readonly pb::MessageParser<GetParameterTreeMsg> _parser = new pb::MessageParser<GetParameterTreeMsg>(() => new GetParameterTreeMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetParameterTreeMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParameterTreeMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParameterTreeMsg(GetParameterTreeMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParameterTreeMsg Clone() {
      return new GetParameterTreeMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetParameterTreeMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetParameterTreeMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetParameterTreeMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Parameter tree data, which contains information about tree structure and available parameters.
  /// Message can have following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class ParameterTreeMsg : pb::IMessage<ParameterTreeMsg> {
    private static readonly pb::MessageParser<ParameterTreeMsg> _parser = new pb::MessageParser<ParameterTreeMsg>(() => new ParameterTreeMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParameterTreeMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterTreeMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterTreeMsg(ParameterTreeMsg other) : this() {
      _hasBits0 = other._hasBits0;
      header_ = other.header_ != null ? other.header_.Clone() : null;
      params_ = other.params_.Clone();
      hash_ = other.hash_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterTreeMsg Clone() {
      return new ParameterTreeMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Motorcortex.ParameterInfo> _repeated_params_codec
        = pb::FieldCodec.ForMessage(18, global::Motorcortex.ParameterInfo.Parser);
    private readonly pbc::RepeatedField<global::Motorcortex.ParameterInfo> params_ = new pbc::RepeatedField<global::Motorcortex.ParameterInfo>();
    /// <summary>
    /// Array with available parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Motorcortex.ParameterInfo> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 3;
    private readonly static uint HashDefaultValue = 0;

    private uint hash_;
    /// <summary>
    /// Hash value of the parameter tree stored in 'repeated ParameterInfo params'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hash {
      get { if ((_hasBits0 & 1) != 0) { return hash_; } else { return HashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        hash_ = value;
      }
    }
    /// <summary>Gets whether the "hash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHash() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private readonly static global::Motorcortex.StatusCode StatusDefaultValue = global::Motorcortex.StatusCode.Ok;

    private global::Motorcortex.StatusCode status_;
    /// <summary>
    /// Status code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.StatusCode Status {
      get { if ((_hasBits0 & 2) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParameterTreeMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParameterTreeMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!params_.Equals(other.params_)) return false;
      if (Hash != other.Hash) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= params_.GetHashCode();
      if (HasHash) hash ^= Hash.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (HasHash) {
        output.WriteRawTag(24);
        output.WriteUInt32(Hash);
      }
      if (HasStatus) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (HasHash) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hash);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParameterTreeMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      params_.Add(other.params_);
      if (other.HasHash) {
        Hash = other.Hash;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 24: {
            Hash = input.ReadUInt32();
            break;
          }
          case 32: {
            Status = (global::Motorcortex.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to get a parameter tree hash.
  ///
  /// Instead of requesting a complete parameter tree, a client might request only a tree hash to compare it
  /// against the cached tree to detect if the tree on the server has been changed. The difference between hashes
  /// indicates the changes in the tree structure. 
  /// Note: Changes in parameter values do not result in a different tree hash.
  ///
  /// Server's reply: ParameterTreeHashMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class GetParameterTreeHashMsg : pb::IMessage<GetParameterTreeHashMsg> {
    private static readonly pb::MessageParser<GetParameterTreeHashMsg> _parser = new pb::MessageParser<GetParameterTreeHashMsg>(() => new GetParameterTreeHashMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetParameterTreeHashMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParameterTreeHashMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParameterTreeHashMsg(GetParameterTreeHashMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParameterTreeHashMsg Clone() {
      return new GetParameterTreeHashMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetParameterTreeHashMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetParameterTreeHashMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetParameterTreeHashMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Parameter tree hash.
  ///
  /// Hash of the parameter tree.
  ///
  /// Message can have following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class ParameterTreeHashMsg : pb::IMessage<ParameterTreeHashMsg> {
    private static readonly pb::MessageParser<ParameterTreeHashMsg> _parser = new pb::MessageParser<ParameterTreeHashMsg>(() => new ParameterTreeHashMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParameterTreeHashMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterTreeHashMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterTreeHashMsg(ParameterTreeHashMsg other) : this() {
      _hasBits0 = other._hasBits0;
      header_ = other.header_ != null ? other.header_.Clone() : null;
      hash_ = other.hash_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterTreeHashMsg Clone() {
      return new ParameterTreeHashMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 2;
    private readonly static uint HashDefaultValue = 0;

    private uint hash_;
    /// <summary>
    /// Hash of the tree.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hash {
      get { if ((_hasBits0 & 1) != 0) { return hash_; } else { return HashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        hash_ = value;
      }
    }
    /// <summary>Gets whether the "hash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHash() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private readonly static global::Motorcortex.StatusCode StatusDefaultValue = global::Motorcortex.StatusCode.Ok;

    private global::Motorcortex.StatusCode status_;
    /// <summary>
    /// Status code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.StatusCode Status {
      get { if ((_hasBits0 & 2) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParameterTreeHashMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParameterTreeHashMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Hash != other.Hash) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasHash) hash ^= Hash.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasHash) {
        output.WriteRawTag(16);
        output.WriteUInt32(Hash);
      }
      if (HasStatus) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasHash) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hash);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParameterTreeHashMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasHash) {
        Hash = other.Hash;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Hash = input.ReadUInt32();
            break;
          }
          case 24: {
            Status = (global::Motorcortex.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to create a publisher group.
  ///
  /// User's request to start publishing specified parameters. Several users may subscribe to
  /// the same group. This mechanism reduces the load on the server and allows more clients to get
  /// frequent updates.
  ///
  /// User may choose a scale factor for the publishing rate of the group.
  ///
  /// Server's reply: GroupStatusMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful.
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because the user has no access rights.
  ///
  /// StatusCode::FAILED_TO_SET_REQUESTED_FRQ - operation successful, but failed to change publisher's frequency, because the group has already existed.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  ///
  /// StatusCode::SUB_LIST_IS_FULL - failed to subscribe for a parameter, because subscription list is full. Create new parameter group.
  ///
  /// StatusCode::WRONG_PARAMETER_PATH - failed to find parameter, because requested path is wrong.
  ///
  /// StatusCode::GROUP_LIST_IS_FULL - failed to create new group, because the group list is full. Release at least one group.
  /// </summary>
  public sealed partial class CreateGroupMsg : pb::IMessage<CreateGroupMsg> {
    private static readonly pb::MessageParser<CreateGroupMsg> _parser = new pb::MessageParser<CreateGroupMsg>(() => new CreateGroupMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateGroupMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupMsg(CreateGroupMsg other) : this() {
      _hasBits0 = other._hasBits0;
      header_ = other.header_ != null ? other.header_.Clone() : null;
      frqDivider_ = other.frqDivider_;
      alias_ = other.alias_;
      paths_ = other.paths_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupMsg Clone() {
      return new CreateGroupMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "frq_divider" field.</summary>
    public const int FrqDividerFieldNumber = 2;
    private readonly static uint FrqDividerDefaultValue = 0;

    private uint frqDivider_;
    /// <summary>
    /// Requested frequency divider, to scale down publisher rate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrqDivider {
      get { if ((_hasBits0 & 1) != 0) { return frqDivider_; } else { return FrqDividerDefaultValue; } }
      set {
        _hasBits0 |= 1;
        frqDivider_ = value;
      }
    }
    /// <summary>Gets whether the "frq_divider" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFrqDivider {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "frq_divider" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFrqDivider() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 3;
    private readonly static string AliasDefaultValue = "";

    private string alias_;
    /// <summary>
    /// Name of the group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_ ?? AliasDefaultValue; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "alias" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAlias {
      get { return alias_ != null; }
    }
    /// <summary>Clears the value of the "alias" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlias() {
      alias_ = null;
    }

    /// <summary>Field number for the "paths" field.</summary>
    public const int PathsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_paths_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> paths_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of the parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Paths {
      get { return paths_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateGroupMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateGroupMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (FrqDivider != other.FrqDivider) return false;
      if (Alias != other.Alias) return false;
      if(!paths_.Equals(other.paths_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasFrqDivider) hash ^= FrqDivider.GetHashCode();
      if (HasAlias) hash ^= Alias.GetHashCode();
      hash ^= paths_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasFrqDivider) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrqDivider);
      }
      if (HasAlias) {
        output.WriteRawTag(26);
        output.WriteString(Alias);
      }
      paths_.WriteTo(output, _repeated_paths_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasFrqDivider) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrqDivider);
      }
      if (HasAlias) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      size += paths_.CalculateSize(_repeated_paths_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateGroupMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasFrqDivider) {
        FrqDivider = other.FrqDivider;
      }
      if (other.HasAlias) {
        Alias = other.Alias;
      }
      paths_.Add(other.paths_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            FrqDivider = input.ReadUInt32();
            break;
          }
          case 26: {
            Alias = input.ReadString();
            break;
          }
          case 34: {
            paths_.AddEntriesFrom(input, _repeated_paths_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Group package description.
  ///
  /// Reply for 'CreateGroupMsg', with the package structure.
  ///
  /// Message can have following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed,
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because user has no access rights.
  ///
  /// StatusCode::FAILED_TO_SET_REQUESTED_FRQ - operation successful, but failed to change publisher's frequency, because the group has already existed.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class GroupStatusMsg : pb::IMessage<GroupStatusMsg> {
    private static readonly pb::MessageParser<GroupStatusMsg> _parser = new pb::MessageParser<GroupStatusMsg>(() => new GroupStatusMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupStatusMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupStatusMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupStatusMsg(GroupStatusMsg other) : this() {
      _hasBits0 = other._hasBits0;
      header_ = other.header_ != null ? other.header_.Clone() : null;
      id_ = other.id_;
      alias_ = other.alias_;
      params_ = other.params_.Clone();
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupStatusMsg Clone() {
      return new GroupStatusMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    /// Unique id of the group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 3;
    private readonly static string AliasDefaultValue = "";

    private string alias_;
    /// <summary>
    /// Name of the group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_ ?? AliasDefaultValue; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "alias" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAlias {
      get { return alias_ != null; }
    }
    /// <summary>Clears the value of the "alias" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlias() {
      alias_ = null;
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Motorcortex.GroupParameterInfo> _repeated_params_codec
        = pb::FieldCodec.ForMessage(34, global::Motorcortex.GroupParameterInfo.Parser);
    private readonly pbc::RepeatedField<global::Motorcortex.GroupParameterInfo> params_ = new pbc::RepeatedField<global::Motorcortex.GroupParameterInfo>();
    /// <summary>
    /// List of parameters' info.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Motorcortex.GroupParameterInfo> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private readonly static global::Motorcortex.StatusCode StatusDefaultValue = global::Motorcortex.StatusCode.Ok;

    private global::Motorcortex.StatusCode status_;
    /// <summary>
    /// Status code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.StatusCode Status {
      get { if ((_hasBits0 & 2) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupStatusMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupStatusMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Id != other.Id) return false;
      if (Alias != other.Alias) return false;
      if(!params_.Equals(other.params_)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasAlias) hash ^= Alias.GetHashCode();
      hash ^= params_.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasId) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (HasAlias) {
        output.WriteRawTag(26);
        output.WriteString(Alias);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (HasStatus) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasAlias) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupStatusMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasAlias) {
        Alias = other.Alias;
      }
      params_.Add(other.params_);
      if (other.HasStatus) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 26: {
            Alias = input.ReadString();
            break;
          }
          case 34: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 40: {
            Status = (global::Motorcortex.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to remove a publisher group.
  ///
  /// User's request to unsubscribe from the group.
  ///
  /// Server's reply: StatusMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed,
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because user has no access rights.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class RemoveGroupMsg : pb::IMessage<RemoveGroupMsg> {
    private static readonly pb::MessageParser<RemoveGroupMsg> _parser = new pb::MessageParser<RemoveGroupMsg>(() => new RemoveGroupMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveGroupMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupMsg(RemoveGroupMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      alias_ = other.alias_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupMsg Clone() {
      return new RemoveGroupMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 2;
    private readonly static string AliasDefaultValue = "";

    private string alias_;
    /// <summary>
    /// Name of the group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_ ?? AliasDefaultValue; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "alias" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAlias {
      get { return alias_ != null; }
    }
    /// <summary>Clears the value of the "alias" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlias() {
      alias_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveGroupMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveGroupMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Alias != other.Alias) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasAlias) hash ^= Alias.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasAlias) {
        output.WriteRawTag(18);
        output.WriteString(Alias);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasAlias) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveGroupMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasAlias) {
        Alias = other.Alias;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Alias = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to get a parameter info and its value.
  ///
  /// Server's reply: ParameterMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because user has no access rights.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class GetParameterMsg : pb::IMessage<GetParameterMsg> {
    private static readonly pb::MessageParser<GetParameterMsg> _parser = new pb::MessageParser<GetParameterMsg>(() => new GetParameterMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetParameterMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParameterMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParameterMsg(GetParameterMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParameterMsg Clone() {
      return new GetParameterMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private readonly static string PathDefaultValue = "";

    private string path_;
    /// <summary>
    /// Path of the requested parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_ ?? PathDefaultValue; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPath {
      get { return path_ != null; }
    }
    /// <summary>Clears the value of the "path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPath() {
      path_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetParameterMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetParameterMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasPath) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasPath) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetParameterMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Parameter info and its value.
  ///
  /// Reply for 'GetParameterMsg', with the parameter info and a value.
  ///
  /// Message can have following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because user has no access rights.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class ParameterMsg : pb::IMessage<ParameterMsg> {
    private static readonly pb::MessageParser<ParameterMsg> _parser = new pb::MessageParser<ParameterMsg>(() => new ParameterMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParameterMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterMsg(ParameterMsg other) : this() {
      _hasBits0 = other._hasBits0;
      value_ = other.value_;
      header_ = other.header_ != null ? other.header_.Clone() : null;
      info_ = other.info_ != null ? other.info_.Clone() : null;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterMsg Clone() {
      return new ParameterMsg(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private readonly static pb::ByteString ValueDefaultValue = pb::ByteString.Empty;

    private pb::ByteString value_;
    /// <summary>
    /// Parameter value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 2;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private global::Motorcortex.ParameterInfo info_;
    /// <summary>
    /// Parameter information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.ParameterInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private readonly static global::Motorcortex.StatusCode StatusDefaultValue = global::Motorcortex.StatusCode.Ok;

    private global::Motorcortex.StatusCode status_;
    /// <summary>
    /// Status code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.StatusCode Status {
      get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParameterMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParameterMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasValue) hash ^= Value.GetHashCode();
      if (header_ != null) hash ^= Header.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasValue) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
      if (header_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Header);
      }
      if (info_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Info);
      }
      if (HasStatus) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParameterMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Motorcortex.ParameterInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
          case 18: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 26: {
            if (info_ == null) {
              Info = new global::Motorcortex.ParameterInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 32: {
            Status = (global::Motorcortex.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to get a list of parameters with info and values.
  ///
  /// Server's reply: ParameterListMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because user has no access rights.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class GetParameterListMsg : pb::IMessage<GetParameterListMsg> {
    private static readonly pb::MessageParser<GetParameterListMsg> _parser = new pb::MessageParser<GetParameterListMsg>(() => new GetParameterListMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetParameterListMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParameterListMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParameterListMsg(GetParameterListMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      params_ = other.params_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParameterListMsg Clone() {
      return new GetParameterListMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Motorcortex.GetParameterMsg> _repeated_params_codec
        = pb::FieldCodec.ForMessage(18, global::Motorcortex.GetParameterMsg.Parser);
    private readonly pbc::RepeatedField<global::Motorcortex.GetParameterMsg> params_ = new pbc::RepeatedField<global::Motorcortex.GetParameterMsg>();
    /// <summary>
    /// List of requested parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Motorcortex.GetParameterMsg> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetParameterListMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetParameterListMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!params_.Equals(other.params_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= params_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetParameterListMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      params_.Add(other.params_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// List of parameters with info values.
  ///
  /// Reply for 'GetParameterListMsg', with the list of parameters info and values.
  ///
  /// Message can have following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because user has no access rights.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class ParameterListMsg : pb::IMessage<ParameterListMsg> {
    private static readonly pb::MessageParser<ParameterListMsg> _parser = new pb::MessageParser<ParameterListMsg>(() => new ParameterListMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParameterListMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterListMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterListMsg(ParameterListMsg other) : this() {
      _hasBits0 = other._hasBits0;
      header_ = other.header_ != null ? other.header_.Clone() : null;
      params_ = other.params_.Clone();
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterListMsg Clone() {
      return new ParameterListMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Motorcortex.ParameterMsg> _repeated_params_codec
        = pb::FieldCodec.ForMessage(18, global::Motorcortex.ParameterMsg.Parser);
    private readonly pbc::RepeatedField<global::Motorcortex.ParameterMsg> params_ = new pbc::RepeatedField<global::Motorcortex.ParameterMsg>();
    /// <summary>
    /// List of parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Motorcortex.ParameterMsg> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private readonly static global::Motorcortex.StatusCode StatusDefaultValue = global::Motorcortex.StatusCode.Ok;

    private global::Motorcortex.StatusCode status_;
    /// <summary>
    /// Status code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.StatusCode Status {
      get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParameterListMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParameterListMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!params_.Equals(other.params_)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= params_.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (HasStatus) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParameterListMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      params_.Add(other.params_);
      if (other.HasStatus) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 24: {
            Status = (global::Motorcortex.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to set a parameter value.
  ///
  /// User's request to update a parameter value.
  ///
  /// Server's reply: StatusMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because user has no access rights.
  ///
  /// StatusCode::USER_LOGGED_IN_NO_CONTROL - User is in read-only mode.
  ///
  /// StatusCode::WRONG_PARAMETER_PATH - Wrong parameter path.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class SetParameterMsg : pb::IMessage<SetParameterMsg> {
    private static readonly pb::MessageParser<SetParameterMsg> _parser = new pb::MessageParser<SetParameterMsg>(() => new SetParameterMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetParameterMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetParameterMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetParameterMsg(SetParameterMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      offset_ = other.offset_ != null ? other.offset_.Clone() : null;
      path_ = other.path_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetParameterMsg Clone() {
      return new SetParameterMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private global::Motorcortex.ParameterOffset offset_;
    /// <summary>
    /// Offset of the parameter value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.ParameterOffset Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    private readonly static string PathDefaultValue = "";

    private string path_;
    /// <summary>
    /// Path of the requested parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_ ?? PathDefaultValue; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPath {
      get { return path_ != null; }
    }
    /// <summary>Clears the value of the "path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPath() {
      path_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private readonly static pb::ByteString ValueDefaultValue = pb::ByteString.Empty;

    private pb::ByteString value_;
    /// <summary>
    /// New values has to be encoded according to the data type, which is provided in the parameter info.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetParameterMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetParameterMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      if (Path != other.Path) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (HasPath) hash ^= Path.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (offset_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Offset);
      }
      if (HasPath) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (HasValue) {
        output.WriteRawTag(34);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (HasPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetParameterMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          Offset = new global::Motorcortex.ParameterOffset();
        }
        Offset.MergeFrom(other.Offset);
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (offset_ == null) {
              Offset = new global::Motorcortex.ParameterOffset();
            }
            input.ReadMessage(Offset);
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
          case 34: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to set a list of parameters values.
  ///
  /// User's request to update a list of parameters values.
  ///
  /// Server's reply: StatusMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because user has no access rights.
  ///
  /// StatusCode::USER_LOGGED_IN_NO_CONTROL - User is in read-only mode.
  ///
  /// StatusCode::WRONG_PARAMETER_PATH - Wrong parameter path.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class SetParameterListMsg : pb::IMessage<SetParameterListMsg> {
    private static readonly pb::MessageParser<SetParameterListMsg> _parser = new pb::MessageParser<SetParameterListMsg>(() => new SetParameterListMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetParameterListMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetParameterListMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetParameterListMsg(SetParameterListMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      params_ = other.params_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetParameterListMsg Clone() {
      return new SetParameterListMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Motorcortex.SetParameterMsg> _repeated_params_codec
        = pb::FieldCodec.ForMessage(18, global::Motorcortex.SetParameterMsg.Parser);
    private readonly pbc::RepeatedField<global::Motorcortex.SetParameterMsg> params_ = new pbc::RepeatedField<global::Motorcortex.SetParameterMsg>();
    /// <summary>
    /// List of parameter set messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Motorcortex.SetParameterMsg> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetParameterListMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetParameterListMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!params_.Equals(other.params_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= params_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetParameterListMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      params_.Add(other.params_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to overwrite/force a parameter value.
  ///
  /// User's request to force a parameter value. For the Input and Parameter types the input value will be overwritten,
  /// for the Output type, the output value will be overwritten.
  ///
  /// By enabling flag 'activate', overwrite value will be active until the flag is disabled, by ether commanding
  /// ReleaseParameterMsg or OverwriteParameterMsg with 'activate' - false.
  ///
  /// Server's reply: StatusMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because user has no access rights.
  ///
  /// StatusCode::USER_LOGGED_IN_NO_CONTROL - User is in read-only mode.
  ///
  /// StatusCode::WRONG_PARAMETER_PATH - Wrong parameter path.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class OverwriteParameterMsg : pb::IMessage<OverwriteParameterMsg> {
    private static readonly pb::MessageParser<OverwriteParameterMsg> _parser = new pb::MessageParser<OverwriteParameterMsg>(() => new OverwriteParameterMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverwriteParameterMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverwriteParameterMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverwriteParameterMsg(OverwriteParameterMsg other) : this() {
      _hasBits0 = other._hasBits0;
      header_ = other.header_ != null ? other.header_.Clone() : null;
      offset_ = other.offset_ != null ? other.offset_.Clone() : null;
      activate_ = other.activate_;
      path_ = other.path_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverwriteParameterMsg Clone() {
      return new OverwriteParameterMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private global::Motorcortex.ParameterOffset offset_;
    /// <summary>
    /// Offset of the parameter value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.ParameterOffset Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "activate" field.</summary>
    public const int ActivateFieldNumber = 3;
    private readonly static bool ActivateDefaultValue = false;

    private bool activate_;
    /// <summary>
    /// Flag to enable/disable permanent overwrite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Activate {
      get { if ((_hasBits0 & 1) != 0) { return activate_; } else { return ActivateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        activate_ = value;
      }
    }
    /// <summary>Gets whether the "activate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActivate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "activate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActivate() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 4;
    private readonly static string PathDefaultValue = "";

    private string path_;
    /// <summary>
    /// Path of the requested parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_ ?? PathDefaultValue; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPath {
      get { return path_ != null; }
    }
    /// <summary>Clears the value of the "path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPath() {
      path_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 5;
    private readonly static pb::ByteString ValueDefaultValue = pb::ByteString.Empty;

    private pb::ByteString value_;
    /// <summary>
    /// New values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverwriteParameterMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverwriteParameterMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      if (Activate != other.Activate) return false;
      if (Path != other.Path) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (HasActivate) hash ^= Activate.GetHashCode();
      if (HasPath) hash ^= Path.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (offset_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Offset);
      }
      if (HasActivate) {
        output.WriteRawTag(24);
        output.WriteBool(Activate);
      }
      if (HasPath) {
        output.WriteRawTag(34);
        output.WriteString(Path);
      }
      if (HasValue) {
        output.WriteRawTag(42);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (HasActivate) {
        size += 1 + 1;
      }
      if (HasPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverwriteParameterMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          Offset = new global::Motorcortex.ParameterOffset();
        }
        Offset.MergeFrom(other.Offset);
      }
      if (other.HasActivate) {
        Activate = other.Activate;
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (offset_ == null) {
              Offset = new global::Motorcortex.ParameterOffset();
            }
            input.ReadMessage(Offset);
            break;
          }
          case 24: {
            Activate = input.ReadBool();
            break;
          }
          case 34: {
            Path = input.ReadString();
            break;
          }
          case 42: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to release an overwrite/force.
  ///
  /// User's request to cancel overwrite of a parameter value.
  ///
  /// Server's reply: StatusMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because user has no access rights.
  ///
  /// StatusCode::USER_LOGGED_IN_NO_CONTROL - User is in read-only mode.
  ///
  /// StatusCode::WRONG_PARAMETER_PATH - Wrong parameter path.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class ReleaseParameterMsg : pb::IMessage<ReleaseParameterMsg> {
    private static readonly pb::MessageParser<ReleaseParameterMsg> _parser = new pb::MessageParser<ReleaseParameterMsg>(() => new ReleaseParameterMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReleaseParameterMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseParameterMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseParameterMsg(ReleaseParameterMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseParameterMsg Clone() {
      return new ReleaseParameterMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private readonly static string PathDefaultValue = "";

    private string path_;
    /// <summary>
    /// Path of the requested parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_ ?? PathDefaultValue; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPath {
      get { return path_ != null; }
    }
    /// <summary>Clears the value of the "path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPath() {
      path_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReleaseParameterMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReleaseParameterMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasPath) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasPath) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReleaseParameterMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to save parameter values to the disk.
  ///
  /// User's request to save parameter values to XML file.
  ///
  /// Server's reply: StatusMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because user has no access rights.
  ///
  /// StatusCode::USER_LOGGED_IN_NO_CONTROL - User is in read-only mode.
  ///
  /// StatusCode::FAILED_TO_OPEN - Failed to create/open a file.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class SaveMsg : pb::IMessage<SaveMsg> {
    private static readonly pb::MessageParser<SaveMsg> _parser = new pb::MessageParser<SaveMsg>(() => new SaveMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveMsg(SaveMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      path_ = other.path_;
      fileName_ = other.fileName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveMsg Clone() {
      return new SaveMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private readonly static string PathDefaultValue = "";

    private string path_;
    /// <summary>
    /// Path to a config file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_ ?? PathDefaultValue; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPath {
      get { return path_ != null; }
    }
    /// <summary>Clears the value of the "path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPath() {
      path_ = null;
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 3;
    private readonly static string FileNameDefaultValue = "";

    private string fileName_;
    /// <summary>
    /// File name.i
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_ ?? FileNameDefaultValue; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "file_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFileName {
      get { return fileName_ != null; }
    }
    /// <summary>Clears the value of the "file_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFileName() {
      fileName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Path != other.Path) return false;
      if (FileName != other.FileName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasPath) hash ^= Path.GetHashCode();
      if (HasFileName) hash ^= FileName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasPath) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (HasFileName) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (HasFileName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      if (other.HasFileName) {
        FileName = other.FileName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to load parameter values from the disk.
  ///
  /// User's request to load parameter values from XML file.
  ///
  /// Server's reply: StatusMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// StatusCode::PERMISSION_DENIED - Permission denied because user has no access rights.
  ///
  /// StatusCode::USER_LOGGED_IN_NO_CONTROL - User is in read-only mode.
  ///
  /// StatusCode::FAILED_TO_OPEN - Failed to create/open a file.
  ///
  /// StatusCode::FAILED_TO_DECODE - failed to decode request message.
  /// </summary>
  public sealed partial class LoadMsg : pb::IMessage<LoadMsg> {
    private static readonly pb::MessageParser<LoadMsg> _parser = new pb::MessageParser<LoadMsg>(() => new LoadMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadMsg(LoadMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      path_ = other.path_;
      fileName_ = other.fileName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadMsg Clone() {
      return new LoadMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private readonly static string PathDefaultValue = "";

    private string path_;
    /// <summary>
    /// Path to config file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_ ?? PathDefaultValue; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPath {
      get { return path_ != null; }
    }
    /// <summary>Clears the value of the "path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPath() {
      path_ = null;
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 3;
    private readonly static string FileNameDefaultValue = "";

    private string fileName_;
    /// <summary>
    /// File name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_ ?? FileNameDefaultValue; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "file_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFileName {
      get { return fileName_ != null; }
    }
    /// <summary>Clears the value of the "file_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFileName() {
      fileName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Path != other.Path) return false;
      if (FileName != other.FileName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasPath) hash ^= Path.GetHashCode();
      if (HasFileName) hash ^= FileName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasPath) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (HasFileName) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (HasFileName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      if (other.HasFileName) {
        FileName = other.FileName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to execute command on the server.
  ///
  /// User's request to execute a command on the server (console mode).
  ///
  /// Server's reply: StatusMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// (Note: Currently not implemented).
  /// </summary>
  public sealed partial class ConsoleCmdMsg : pb::IMessage<ConsoleCmdMsg> {
    private static readonly pb::MessageParser<ConsoleCmdMsg> _parser = new pb::MessageParser<ConsoleCmdMsg>(() => new ConsoleCmdMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsoleCmdMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleCmdMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleCmdMsg(ConsoleCmdMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleCmdMsg Clone() {
      return new ConsoleCmdMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    /// <summary>
    /// Console command
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsoleCmdMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsoleCmdMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsoleCmdMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///
  /// Request to execute a list of commands on the server.
  ///
  /// User's request to execute a list of commands on the server (console mode).
  ///
  /// Server's reply: StatusMsg, with following status codes:
  ///
  /// StatusCode::OK - operation successful,
  ///
  /// StatusCode::FAILED - operation failed.
  ///
  /// (Note: Currently not implemented).
  /// </summary>
  public sealed partial class ConsoleCmdListMsg : pb::IMessage<ConsoleCmdListMsg> {
    private static readonly pb::MessageParser<ConsoleCmdListMsg> _parser = new pb::MessageParser<ConsoleCmdListMsg>(() => new ConsoleCmdListMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsoleCmdListMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Motorcortex.MotorcortexReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleCmdListMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleCmdListMsg(ConsoleCmdListMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      cmds_ = other.cmds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleCmdListMsg Clone() {
      return new ConsoleCmdListMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Motorcortex.Header header_;
    /// <summary>
    /// Frame counter and actual time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Motorcortex.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "cmds" field.</summary>
    public const int CmdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Motorcortex.ConsoleCmdMsg> _repeated_cmds_codec
        = pb::FieldCodec.ForMessage(18, global::Motorcortex.ConsoleCmdMsg.Parser);
    private readonly pbc::RepeatedField<global::Motorcortex.ConsoleCmdMsg> cmds_ = new pbc::RepeatedField<global::Motorcortex.ConsoleCmdMsg>();
    /// <summary>
    /// List of commands
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Motorcortex.ConsoleCmdMsg> Cmds {
      get { return cmds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsoleCmdListMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsoleCmdListMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!cmds_.Equals(other.cmds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= cmds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      cmds_.WriteTo(output, _repeated_cmds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += cmds_.CalculateSize(_repeated_cmds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsoleCmdListMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Motorcortex.Header();
        }
        Header.MergeFrom(other.Header);
      }
      cmds_.Add(other.cmds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Motorcortex.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            cmds_.AddEntriesFrom(input, _repeated_cmds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
